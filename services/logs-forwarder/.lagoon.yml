apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: lagoon-openshift-template-fluentd
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: PROJECT
    description: Which project this belongs to, original value
    required: true
  - name: LAGOON_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ""
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    required: true
  - name: REGISTRY
    description: Registry where Images are pushed to
    required: true
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: "Rolling"
  - name: SERVICE_IMAGE
    description: Pullable image of service
    required: true
  - name: CRONJOBS
    description: Oneliner of Cronjobs
    value: ""
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      service: ${SERVICE_NAME}
    strategy:
      type: ${DEPLOYMENT_STRATEGY}
    template:
      metadata:
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
      spec:
        containers:
        - image: ${SERVICE_IMAGE}
          name: ${SERVICE_NAME}
          ports:
          - containerPort: 24284
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 24284
            initialDelaySeconds: 20
          livenessProbe:
            tcpSocket:
              port: 24284
            initialDelaySeconds: 120
          env:
            - name: LOGSDB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: LOGSDB_ADMIN_PASSWORD
                  name: logs-db-admin-password
          envFrom:
          - configMapRef:
              name: lagoon-env
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
          - mountPath: /fluentd/etc/
            name: config
          - mountPath: /fluentd/buffer/
            name: buffer
        volumes:
        - configMap:
            items:
            - key: FLUENT_CONF
              path: fluent.conf
            - key: CONTAINER_LOGS_JSON
              path: container-logs.json
            name: ${SERVICE_NAME}-config
          name: config
        - emptyDir: {}
          name: buffer
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: secure-forward
      port: 24284
      protocol: TCP
      targetPort: 24284
    type: NodePort
    selector:
      service: ${SERVICE_NAME}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${SERVICE_NAME}-config
  data:
    FLUENT_CONF: |-
      <system>
        log_level info
      </system>

      <source>
        @type secure_forward
        @label @ELASTICSEARCH
        self_hostname "#{ENV['HOSTNAME']}"
        secure true
        port 24284
        shared_key "#{ENV['LOGS_FORWARDER_SHARED_KEY']}"
        ca_cert_path /fluentd/ssl/ca_cert.pem
        ca_private_key_path /fluentd/ssl/ca_key.pem
        ca_private_key_passphrase "#{ENV['LOGS_FORWARDER_PRIVATE_KEY_PASSPHRASE']}"
      </source>

      <label @ELASTICSEARCH>
          <filter **>
            @type record_modifier
            <record>
              namespace_name "${record['kubernetes']['namespace_name']}"
            </record>
          </filter>
          <filter **>
            @type record_modifier
            <replace>
              # We run automated testing which creates project names in the form of e2e-0000000000-AAAAAAAAAAAAAAAAAAAAAAAAAA
              # we just save them as with the project name 'e2'
              key namespace_name
              expression /^e2e-\\d{10}-\\S{26}$/
              replace e2e
            </replace>
          </filter>
          <filter **>
            @type record_modifier
            <record>
              index_name container-logs-${record['namespace_name']}-${Time.at(time).strftime("%G.%V")}
            </record>
          </filter>

          # <filter **>
          #   @type stdout
          # </filter>

          <match **>
            @type elasticsearch
            host logs-db
            port 9200
            templates { "container-logs": "/fluentd/etc/container-logs.json"}
            template_overwrite true
            target_index_key index_name
            index_name container-logs-noproject-%G.%V
            <buffer tag,time>
              @type file
              path /fluentd/buffer/elasticsarch
              timekey 3600
              timekey_wait 0s
              flush_mode interval
              flush_interval 1s
              chunk_limit_size 256MB
              total_limit_size 5GB
              flush_thread_count 8
              overflow_action block
            </buffer>
            id_key viaq_msg_id
            remove_keys viaq_msg_id, viaq_index_name, namespace_name, kubernetes.master_url
            type_name _doc
            user admin
            password "#{ENV['LOGSDB_ADMIN_PASSWORD']}"
          </match>
      </label>
    CONTAINER_LOGS_JSON: |-
      {
        "template" : "container-logs-*",
        "version" : 60002,
        "settings" : {
          "index.refresh_interval" : "5s",
          "number_of_shards": 1,
          "number_of_replicas": 2
        },
        "mappings" : {
          "_default_" : {
            "dynamic_templates" : [ {
              "message_field" : {
                "path_match" : "message",
                "match_mapping_type" : "string",
                "mapping" : {
                  "type" : "text",
                  "norms" : false
                }
              }
            }, {
              "string_fields" : {
                "match" : "*",
                "match_mapping_type" : "string",
                "mapping" : {
                  "type" : "text", "norms" : false,
                  "fields" : {
                    "keyword" : { "type": "keyword", "ignore_above": 256 }
                  }
                }
              }
            } ],
            "properties" : {
              "@timestamp": { "type": "date"},
              "@version": { "type": "keyword"},
              "geoip"  : {
                "dynamic": true,
                "properties" : {
                  "ip": { "type": "ip" },
                  "location" : { "type" : "geo_point" },
                  "latitude" : { "type" : "half_float" },
                  "longitude" : { "type" : "half_float" }
                }
              }
            }
          }
        }
      }